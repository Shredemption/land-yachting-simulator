# Specify the minimum version of CMake
cmake_minimum_required(VERSION 3.10)

# Project name
project(Marama)

# Set the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Prioritize static libraries (static libraries first, dynamic ones ignored)
set(CMAKE_FIND_LIBRARY_SUFFIXES .a .lib)

# Check if using MinGW or UNIX
if(MINGW OR UNIX)
    # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static")
    # set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static")
    # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libgcc")
    # set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc")
    # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libstdc++")
    # set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libstdc++")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lpthread")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lpthread")
endif()

# Set Conan's toolchain and dependency paths
set(CMAKE_TOOLCHAIN_FILE "${CMAKE_BINARY_DIR}/build/conan_toolchain.cmake" CACHE FILEPATH "Conan toolchain file")

# Add all .cpp files in the src directory and its subdirectories
file(GLOB_RECURSE CPP_SOURCES src/*.cpp)

# Add all .h files in the src directory and its subdirectories
file(GLOB_RECURSE HEADER_FILES src/*.h)

# Create the library target
add_executable(${PROJECT_NAME} src/main.cpp ${CPP_SOURCES} ${HEADER_FILES})

# Include directories (headers)
target_include_directories(${PROJECT_NAME} PUBLIC include)

# Copy shaders
file(COPY src/shaders DESTINATION ${CMAKE_BINARY_DIR}/)

# Include src to path for accessing all .h files
include_directories(${PROJECT_SOURCE_DIR}/src)

# Include dependencies generated by Conan
find_package(glfw3 REQUIRED)
find_package(glew REQUIRED)
find_package(glm REQUIRED)
find_package(glad REQUIRED)
find_package(assimp REQUIRED)
find_package(stb REQUIRED)
find_package(jsoncons REQUIRED)
find_package(freetype REQUIRED)

# Link libraries to the target
target_link_libraries(${PROJECT_NAME} stdc++)
target_link_libraries(${PROJECT_NAME} glfw)
target_link_libraries(${PROJECT_NAME} GLEW::GLEW)
target_link_libraries(${PROJECT_NAME} glm::glm)
target_link_libraries(${PROJECT_NAME} glad::glad)
target_link_libraries(${PROJECT_NAME} assimp::assimp)
target_link_libraries(${PROJECT_NAME} jsoncons)
target_link_libraries(${PROJECT_NAME} Freetype::Freetype)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Set as Windows application
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mwindows")

message(STATUS "Include directories: ${CMAKE_INCLUDE_PATH}")