# Specify the minimum version of CMake
cmake_minimum_required(VERSION 3.15)
cmake_policy(SET CMP0091 NEW)

# Project name
project(Marama)

# Set the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Prioritize static libraries (static libraries first, dynamic ones ignored)
set(CMAKE_FIND_LIBRARY_SUFFIXES .a .lib)
set(BUILD_SHARED_LIBS OFF)

# Set Conan's toolchain and dependency paths
set(CMAKE_TOOLCHAIN_FILE "${CMAKE_BINARY_DIR}/build/conan_toolchain.cmake" CACHE FILEPATH "Conan toolchain file")

# Add all .cpp files in the src directory and its subdirectories
file(GLOB_RECURSE CPP_SOURCES src/*.cpp)

# Add all .h files in the src directory and its subdirectories
file(GLOB_RECURSE HEADER_FILES src/*.h)

# Add exe icon
if(WIN32)
    set(ICON_RC "${CMAKE_SOURCE_DIR}/resources/icon/icon.rc")
    
    if(MSVC)
        # Just add the .rc file directly to the sources
        set(APP_ICON_RESOURCE_FILES ${ICON_RC})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        # Use windres to compile .rc into .res for MinGW
        set(ICON_RES "${CMAKE_BINARY_DIR}/icon.res")
        add_custom_command(
            OUTPUT ${ICON_RES}
            COMMAND windres ${ICON_RC} -O coff -o ${ICON_RES}
            DEPENDS ${ICON_RC}
            COMMENT "Compiling Windows resource file (icon.rc)"
            VERBATIM
        )
        add_custom_target(CompileIcon ALL DEPENDS ${ICON_RES})
        set_source_files_properties(${ICON_RES} PROPERTIES GENERATED TRUE)
        set(APP_ICON_RESOURCE_FILES ${ICON_RES})
    endif()
endif()

# Create the library target
add_executable(${PROJECT_NAME} WIN32 ${CPP_SOURCES} ${HEADER_FILES} ${APP_ICON_RESOURCE_FILES})
set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_SOURCE_DIR}
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}
    RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_SOURCE_DIR}
    RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_SOURCE_DIR}
)

# Use main()
if (MSVC)
    set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS "/SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup")
endif()

# Make sure the executable depends on the resource compilation target
if(TARGET CompileIcon)
    add_dependencies(${PROJECT_NAME} CompileIcon)
endif()

# Now add the icon resource to the executable's sources
if(WIN32 AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_link_libraries(${PROJECT_NAME} "${ICON_RES}")
endif()

# Include directories (headers)
target_include_directories(${PROJECT_NAME} PUBLIC include)
target_link_directories(${PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/thirdparty/Ultralight/lib)

# Include src to path for accessing all .h files
include_directories(${PROJECT_SOURCE_DIR}/src)
include_directories(${CMAKE_SOURCE_DIR}/thirdparty/Ultralight/include)

# Include dependencies generated by Conan
find_package(glfw3 REQUIRED)
find_package(glew REQUIRED)
find_package(glm REQUIRED)
find_package(glad REQUIRED)
find_package(assimp REQUIRED)
find_package(stb REQUIRED)
find_package(jsoncons REQUIRED)
find_package(freetype REQUIRED)

# Link libraries to the target
target_link_libraries(${PROJECT_NAME}
    glfw
    GLEW::GLEW
    glm::glm
    glad::glad
    assimp::assimp
    jsoncons
    Freetype::Freetype
    Ultralight
    AppCore
    WebCore
)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)